using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MathFunctionParser
{
    /** This class represents a node in the evaluation tree
     *  Generated by the Parser
     */
    class EvaluatorNode
    {
        // Fields
        private EvaluatorNode leftNode;
        private EvaluatorNode rightNode;
        public Func<double, double, double> evalFunc;

        // Constructors
        public EvaluatorNode() { }
        public EvaluatorNode(EvaluatorNode left, EvaluatorNode right)
        {
            leftNode = left;
            rightNode = right;
        }

        // Methods
        public virtual double Evaluate()
        {
            return evalFunc(leftNode.Evaluate(), rightNode.Evaluate());
        }
    }
    class ConstantNode : EvaluatorNode
    {
        // Fields
        private double value;

        // Constructor
        public ConstantNode(double value) { this.value = value; }

        // Methods
        override public double Evaluate() { return value; }
    }
    class VariableNode : EvaluatorNode
    {
        // Fields
        private string varName;
        private SortedDictionary<string, double> varDB;

        // Constructor
        public VariableNode(string name, SortedDictionary<string, double> db)
        {
            this.varName = name;
            varDB = db;
        }

        // Methods
        public override double Evaluate()
        {
            return varDB[varName];
        }
    }
}
